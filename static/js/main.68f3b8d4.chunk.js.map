{"version":3,"sources":["components/Header/index.js","services/api.js","pages/main/index.js","pages/movie/index.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","api","axios","create","baseURL","Main","state","movies","movieInfo","page","loadMovies","a","get","response","data","setState","results","prevPage","pageNumber","nextPage","pages","this","className","map","movie","key","src","poster_path","alt","title","overview","to","disabled","onClick","Component","Movie","genres","loadMovie","props","match","params","backdrop_path","tagline","href","homepage","target","genre","name","format","release_date","Routes","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.68f3b8d4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './estilo.css';\r\n\r\nconst Header = () => <header id=\"main-header\">Movies React</header>;\r\n\r\nexport default Header;\r\n","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'https://api.themoviedb.org/3/',\r\n});\r\n\r\nexport default api;\r\n","import React, { Component } from 'react';\r\nimport api from '../../services/api';\r\nimport { Link } from 'react-router-dom';\r\nimport './estilo.scss';\r\n\r\nexport default class Main extends Component {\r\n  state = {\r\n    movies: [],\r\n    movieInfo: {},\r\n    page: 1,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadMovies();\r\n  }\r\n  loadMovies = async (page = 1) => {\r\n    const response = await api.get(\r\n      `discover/movie?api_key=941d452609a3a292dcce2cbb24a18e0a&language=pt-BR&sort_by=popularity.desc&include_adult=false&include_video=false&page=${page}`,\r\n    );\r\n\r\n    const { movieInfo } = response.data;\r\n\r\n    this.setState({ movies: response.data.results });\r\n  };\r\n\r\n  prevPage = () => {\r\n    const { page, movieInfo } = this.state;\r\n    if (page === 1) return;\r\n    const pageNumber = page - 1;\r\n    this.setState({ page: pageNumber });\r\n    this.loadMovies(pageNumber);\r\n  };\r\n\r\n  nextPage = () => {\r\n    const { page, movieInfo } = this.state;\r\n    if (page === movieInfo.pages) return;\r\n    const pageNumber = page + 1;\r\n    this.setState({ page: pageNumber });\r\n    this.loadMovies(pageNumber);\r\n  };\r\n\r\n  render() {\r\n    const { movies, page, movieInfo } = this.state;\r\n    return (\r\n      <div className=\"movie-list\">\r\n        {movies.map((movie) => (\r\n          <article key={movie.id}>\r\n            <img\r\n              src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\r\n              alt={`${movie.title} | React App Movies`}\r\n            ></img>\r\n            <div>\r\n              <strong>\r\n                <h1>{movie.title}</h1>\r\n              </strong>\r\n              <p>{movie.overview}</p>\r\n              <Link to={`./movie/${movie.id}`}>Acessar filme</Link>\r\n            </div>\r\n          </article>\r\n        ))}\r\n        <div className=\"actions\">\r\n          <button disabled={page === 1} onClick={this.prevPage}>\r\n            Anterior\r\n          </button>\r\n          <button disabled={page === movieInfo.pages} onClick={this.nextPage}>\r\n            Próximo\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Moment from 'react-moment';\r\nimport 'moment-timezone';\r\nimport api from '../../services/api';\r\n\r\nimport './estilo.css';\r\n\r\nexport default class Movie extends Component {\r\n  state = {\r\n    movie: {},\r\n    genres: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadMovie();\r\n  }\r\n\r\n  loadMovie = async () => {\r\n    const { id } = this.props.match.params;\r\n    const response = await api.get(\r\n      `movie/${id}?api_key=941d452609a3a292dcce2cbb24a18e0a&language=pt-BR`,\r\n    );\r\n\r\n    this.setState({ movie: response.data });\r\n    this.setState({ genres: response.data.genres });\r\n  };\r\n\r\n  render() {\r\n    const { movie, genres } = this.state;\r\n\r\n    return (\r\n      <div className=\"movie-info\">\r\n        <img\r\n          className=\"movie-poster\"\r\n          src={`https://image.tmdb.org/t/p/original${movie.backdrop_path}`}\r\n          alt={`${movie.title} | React App Movies`}\r\n        ></img>\r\n        <h1>{movie.title}</h1>\r\n        <h2>\r\n          <b>{movie.tagline}</b>\r\n        </h2>\r\n        <p>{movie.overview}</p>\r\n        <p>\r\n          URL:{' '}\r\n          <a href={movie.homepage} target=\"_blank\">\r\n            {movie.homepage}\r\n          </a>\r\n        </p>\r\n        <p>\r\n          Gêneros:\r\n          {genres.map((genre) => (\r\n            <span key={genre.id} className=\"movie-tag\">\r\n              <small>{genre.name}</small>\r\n            </span>\r\n          ))}\r\n        </p>\r\n        <p>\r\n          Data de lançamento:{' '}\r\n          <Moment format=\"DD/MM/YYYY\">{movie.release_date}</Moment>\r\n        </p>\r\n        <Link className=\"btn\" to={`/`}>\r\n          Voltar para página principal\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport Main from './pages/main';\r\nimport Movie from './pages/movie';\r\n\r\nconst Routes = () => (\r\n  <BrowserRouter>\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Main} />\r\n      <Route path=\"/movie/:id\" component={Movie} />\r\n    </Switch>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default Routes;\r\n","import React from 'react';\nimport Header from './components/Header';\nimport Main from './pages/main';\nimport Routes from './routes';\nimport './estilo.scss';\n\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n    <Routes />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}